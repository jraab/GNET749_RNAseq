brg1_hallmark %>%
as.data.frame() %>%
rownames_to_column() %>%
arrange(NES) %>%
mutate(rowname = factor(rowname, levels = rowname) ) %>%
ggplot(aes(x = rowname, y = NES, fill = as.factor(sign(NES)))) +
geom_col(color = 'grey30') +
coord_flip() +
scale_fill_manual(values = c('blue', 'gold2') )
brg1_hallmark %>%
as.data.frame() %>%
rownames_to_column() %>%
filter(p.adjust <  0.05) |>
arrange(NES) %>%
mutate(rowname = factor(rowname, levels = rowname) ) %>%
ggplot(aes(x = rowname, y = NES, fill = as.factor(sign(NES)))) +
geom_col(color = 'grey30') +
coord_flip() +
scale_fill_manual(values = c('blue', 'gold2') )
gseaplot2(brg1_hallmark, geneSetID = 'HALLMARK_TNFA_SIGNALING_VIA_NFKB')
gseaplot(brg1_hallmark, geneSetID = 'HALLMARK_TNFA_SIGNALING_VIA_NFKB')
ridgeplot(brg1_hallmark, fill = 'p.adjust', core_enrichment = T)
# THe core_enrichment argument tells the plot to only include those genes that were in the core_enrichment column
# these are the genes that contribue the most to the scores
ridgeplot(brg1_hallmark, fill = 'p.adjust', core_enrichment = F)
# We can extract a specific set of these genes
hallmark_subset <- hallmark_t2g %>% filter(TERM == 'HALLMARK_TNFA_SIGNALING_VIA_NFKB') %>% pull(GENE)
# and plot this subset as a volcano plot
brg_res %>%
filter(rowname %in% hallmark_subset) %>%
ggplot(aes(x =log2FoldChange, y = -log10(padj), color = padj < 0.05 )) +
geom_point() +
scale_color_manual(values = c('grey70', 'red2')) +
theme_bw()  +
ggrepel::geom_label_repel(aes(label = rowname), color = 'steelblue')
# We want our original data, which we can load from a saved DESeqDataSet
# Remember counts is coming from the entire dds object we loaded up top
rg <- rankGenes(counts) # this ranks the expression level in each of our samples
rg
# Now we pass this to simplescore along with a list of genes for our data set
ss <- simpleScore(rg, upSet = unique(hallmark_subset) )
ss
?simpleScore
table(rownames(rg) == 'CYR61')
# Using this we can compare our scores across our samples
# best to incorporate our conditions
ss %>% as.data.frame() %>%
rownames_to_column() %>%
separate(rowname, into = c('group', 'rep'), sep = '_', remove =F )  %>%
ggplot(aes(x = group, y = TotalScore)) + geom_point()
liver_genes <- msigdbr_df[grepl('HSIAO_LIVER_SPECIFIC_GENES', msigdbr_df$gs_name), ] %>% dplyr::select(gs_name, gene_symbol)
liver_genes
# lets score for increase TNFA and decrease liver specific genes
ss_liver <- simpleScore(rg, upSet= unique(hallmark_subset), downSet = unique(liver_genes$gene_symbol) )
ss_liver %>% as.data.frame() %>%
rownames_to_column() %>%
separate(rowname, into = c('group', 'rep'), sep = '_', remove =F )  %>%
ggplot(aes(x = group, y = TotalScore)) + geom_point()
################################################################################
# Overlaps between groups  ####################################################
################################################################################
brg_res <- read_csv('data/results_brg1.csv')
brm_res <- read_csv('data/results_brm.csv')
double_res <- read_csv('data/results_double.csv')
brg_sig <- brg_res %>% filter(padj < 0.05)
brm_sig <- brm_res %>% filter(padj <0.05)
double_sig <- double_res %>% filter(padj < 0.05)
x <- list(brg=brg_sig$rowname, brm=brm_sig$rowname, double=double_sig$rowname)  # list of our gene names, 1 element for each data set
head(x)
# If you want separate colors for each, this works well
ggvenn(x)
?ggven
?ggvenn
??ggvenn
# If you want separate colors for each, this works well
ggvenn::ggvenn(x)
ggven::ggvenn(x[1:2])
ggvenn::ggvenn(x[1:2])
ggvenn::ggvenn(x[1:2])
ggvenn::ggvenn(x, fill_color = c('red', 'blue', 'green') )
# IF you want color to map to the counts in a section use this
ggVennDiagram(x)
# IF you want color to map to the counts in a section use this
ggVennDiagram::ggVennDiagram(x)
ggVennDiagram::ggVennDiagram(x, label_alpha  = 0) +
ggplot2::scale_fill_gradient(low="blue",high = "yellow") +
scale_color_manual(values = c('grey30', 'grey30', 'grey30') )
ggVennDiagram::ggVennDiagram(x, label_alpha  = 0) +
ggplot2::scale_fill_gradient(low = 'white', high = 'red') +
scale_color_manual(values = c('grey30', 'grey30', 'grey30') )
# UpSet plots - overlap of categories - similar to venn
# but much better
upset(fromList(x))
# UpSet plots - overlap of categories - similar to venn
# but much better
UpSetR::upset(fromList(x))
library(UpSetR)
# UpSet plots - overlap of categories - similar to venn
# but much better
UpSetR::upset(fromList(x))
upset(fromList(x), matrix.color = 'steelblue', main.bar.color = 'hotpink' )
library(tximeta)
BiocManager::install('tximeta')
library(tximeta)
library(tidyverse)
library(DESeq2)
# possibly needed to fix a bug on some versions of R
#devtools::install_github("RobinHankin/Brobdingnag")
# Import design data
cdata <- read_csv('data/class_data_info.csv')
cdata
colnames(cdata)[1] <- 'names'
cdata
# This line creates a new column to keep track of where each Salmon output file is
# file.path makes sticks the arguments together with / between them to make path names
cdata$files <- file.path('data/salmon', paste0(cdata$names, '_decoy_quant'), 'quant.sf')
se <- tximeta::tximeta(cdata)
se
gse <- summarizeToGene(se)
rowRanges(gse)
rowRanges(gse)
# using tximeta
library(tximeta)
library(tidyverse)
library(DESeq2)
# possibly needed to fix a bug on some versions of R
#devtools::install_github("RobinHankin/Brobdingnag")
# Import design data
cdata <- read_csv('data/class_data_info.csv')
cdata
colnames(cdata)[1] <- 'names'
cdata
# This line creates a new column to keep track of where each Salmon output file is
# file.path makes sticks the arguments together with / between them to make path names
cdata$files <- file.path('data/salmon', paste0(cdata$names, '_decoy_quant'), 'quant.sf')
se <- tximeta::tximeta(cdata)
se
gse <- summarizeToGene(se)
gse
rowRanges(gse)
# Enrichment analysis in R
library(tidyverse)
library(msigdbr)  # install.packages('msigdbr')
# Below packages can be installed with BiocManager::install(c('singscore', 'clusterProfiler', 'DOSE', 'org.Hs.eg.db') )
# I tried to put these in a script to install - see enrichment_packages.R
library(singscore)
library(clusterProfiler)
library(enrichplot)
#library(biomaRt)
library(GSVA)
library(GSVAdata)
library(UpSetR)
library(ggvenn)
library(ggVennDiagram)
library(fgsea)
# There may be an issue with RSqlite affecting loading of some packages
# If you get an issue with RSqlite - try the following
#remotes::install_version("RSQLite", version = "2.2.5")
# Either install the older version of rsqlite using above code or run
#options(connectionObserver=NULL) # prior to running the next line
# THe above no longer seems required,  but I'm leaving it there in case anyone has issues install/loading these libraires
library(org.Hs.eg.db)
??clusterProfiler
################################################################################
# Establish some of the data in the formats we'll need today
# Load the log2 fold change data set for the BRG1 knockdown experiment
brg_res <- read_csv('data/results_brg1.csv')
brg_res
# an alternative is to use the bitr function from clusterprofiler.
gene.df <- bitr(brg_res$rowname, fromType = "SYMBOL",
toType = c("ENSEMBL", "SYMBOL", 'ENTREZID'),
OrgDb = org.Hs.eg.db)
# Annotables could also be used if it has the annotations you want
# Depending on which approach you use, you'll need to make sure column names line up in the code below
anno.df <- brg_res |> left_join(annotables::grch38, by = c('rowname' = 'symbol'))
anno.df |> filter(is.na(entrez)) |> count()
anno.df
anno.df |> filter(is.na(entrez)) |> count()
anno.df |> dplyr::filter(is.na(entrez)) |> count()
anno.df |> dplyr::filter(is.na(entrez))
anno.df |> dplyr::filter(is.na(entrez)) |> group_by(rowname) |> summarise(count = n() )
anno.df |> dplyr::filter(is.na(entrez))  |> summarise(count = n() )
# since annotables wasn't tons better, I'm going ot stick with bitr for this
# Add the entrez Ids
brg_res <- brg_res %>% left_join(gene.df, by = c('rowname' = 'SYMBOL'))
# Some of these don't have ensembl or entrezids. This could be an annotation issue or a gene where not much is known (psuedogene)
# Remove these genes b/c we don't want to include them in downstream analysis.
# alternatively spend time trying to figure out a better or newer set of annotations, but in this case
brg_res <- brg_res |> filter(!is.na(ENSEMBL) & !is.na(ENTREZID) )
# Some of these don't have ensembl or entrezids. This could be an annotation issue or a gene where not much is known (psuedogene)
# Remove these genes b/c we don't want to include them in downstream analysis.
# alternatively spend time trying to figure out a better or newer set of annotations, but in this case
brg_res <- brg_res |> dplyr::filter(!is.na(ENSEMBL) & !is.na(ENTREZID) )
# Identify significant up and downregulated genes  - These are useful for overrepresentation analysis
brg1_up <- brg_res %>% filter(padj < 0.05, log2FoldChange > 1 ) # significant upregulated
brg1_down <- brg_res %>% filter(padj < 0.05, log2FoldChange < -1) # significant downregulated
# Create a rank ordered list of genes - These ranked lists are useful for Gene Set Enrichment analyssi
brg1_res_ordered <- brg_res %>% arrange(desc(log2FoldChange))
brg1_ol <- brg1_res_ordered$log2FoldChange
brg1_ids <- brg1_res_ordered$log2FoldChange
names(brg1_ol) <- brg1_res_ordered$rowname
names(brg1_ids) <- brg1_res_ordered$ENTREZID
head(brg1_ol)
names(brg_ids)
names(brg1_ids)
head(brg1_ids)
# A few methods, (GSVA and SingScore) need full data (count/gene ranks)
load('data/GSE102560_dds.Rda')# load dds
dds <- DESeq(dds) # running this here so we get proper size factors etc
design(dds)
dds_fix <- dds
assay(dds_fix) <- limma::removeBatchEffect(assay(dds_fix), dds$rep)
counts <- counts(dds_fix, norm = T)
#counts <- counts[rowMeans(counts) > 10, ]
dim(counts)
?enrichKEGG
# Over representation analysis using KEGG
kegg_up <-clusterProfiler::enrichKEGG(gene = brg1_up$ENTREZID,
universe = brg_res$ENTREZID,
organism     = 'hsa',
pvalueCutoff = 0.05)
# Identify significant up and downregulated genes  - These are useful for overrepresentation analysis
brg1_up <- brg_res %>% filter(padj < 0.05, log2FoldChange > 1 ) # significant upregulated
# Identify significant up and downregulated genes  - These are useful for overrepresentation analysis
brg1_up <- brg_res %>% dplyr::filter(padj < 0.05, log2FoldChange > 1 ) # significant upregulated
brg1_down <- brg_res %>% dplyr::filter(padj < 0.05, log2FoldChange < -1) # significant downregulated
# Over representation analysis using KEGG
kegg_up <-clusterProfiler::enrichKEGG(gene = brg1_up$ENTREZID,
universe = brg_res$ENTREZID,
organism     = 'hsa',
pvalueCutoff = 0.05)
kegg_down <- clusterProfiler::enrichKEGG(gene   = brg1_down$ENTREZID,
universe = brg_res$ENTREZID,
organism = 'hsa',
pvalueCutoff = 0.05)
dotplot(kegg_up)
barplot(kegg_up)
kegg_up |> as_tibble()
kegg_up
kegg_up |> as_tibble()
kegg_up |> as.data.frame() |>
ggplot(aes(x = -log10(qvalue), y = Description, size = Count)) +
geom_point()
# How to make them ordered in some more interesting way
kegg_up |> as.data.frame() |>
arrange(p.adjust) |>
mutate(Description = factor(Description, levels = Description) ) |>
# this is a little trick to arrange by something and then relevel the factor based on that arrangement
ggplot(aes(x = -log10(qvalue), y = Description, size = Count)) +
geom_point()
# How to make them ordered in some more interesting way
kegg_up |> as.data.frame() |>
arrange(desc(p.adjust))  |>
mutate(Description = factor(Description, levels = Description) ) |>
# this is a little trick to arrange by something and then relevel the factor based on that arrangement
ggplot(aes(x = -log10(qvalue), y = Description, size = Count)) +
geom_point()
# Over representation of GO terms
brg_up_go <- clusterProfiler::enrichGO(gene    = brg1_up$ENTREZID,
universe      = brg_res$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = c("MF"),
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
brg_down_go <- clusterProfiler::enrichGO(gene    = brg1_down$ENTREZID,
universe      = brg_res$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = c("MF"),
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
dotplot(brg_up_go)
dotplot(brg_up_go)
# termsim can be useful for seeing how similar categories are
emapplot(pairwise_termsim(brg_down_go))
emapplot(pairwise_termsim(kegg_down))
# Can remove similar terms - does not work if using ont = 'ALL'
dotplot(brg_down_go)
dotplot(simplify(x = brg_down_go, cutoff = 0.2)) # 0.7 is default, but I wanted to make a point
# Can look at gene expression within categories using heatplot
heatplot(brg_down_go, foldChange = brg1_ol)  #not terribly interesting since we limited to up or downregulated genes
# Can look at gene expression within categories using heatplot
heatplot(brg_down_go, foldChange = brg1_ol, showCategory = 10)  #not terribly interesting since we limited to up or downregulated genes
# lets try with all genes
brg_all_go <- enrichGO(gene = c(brg1_up$ENTREZID, brg1_down$ENTREZID),
universe      = brg_res$ENTREZID,
OrgDb         = org.Hs.eg.db,
ont           = 'MF',
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
heatplot(brg_all_go, foldChange = brg1_ol)
#  You can also do overrepresentation with any arbitrary gene set
# Here we'll get the msigdb data from the msigdbr package
msigdbr_df <- misgdbr::msigdbr(species = 'Homo sapiens') # this retrieves all the data sets
#  You can also do overrepresentation with any arbitrary gene set
# Here we'll get the msigdb data from the msigdbr package
msigdbr_df <- msigdbr::msigdbr(species = 'Homo sapiens') # this retrieves all the data sets
msigdbr_species()
length(unique(msigdbr_df$gs_name) ) # ~32,000 gene sets
msigdbr_df |> head()
msigdbr_t2g = msigdbr_df %>% dplyr::select(gs_name, human_gene_symbol) %>% as.data.frame() # Make a df that contains the terms and genes
msigdbr_t2g %>% head()
# I often like the hallmark data set, but I'm also filtering here so this runs a little faster, you could run this on the whole data frame
# Let's run the above but just on the hallmark genes
hallmark <- msigdbr_df %>% filter(gs_cat == 'H')
# I often like the hallmark data set, but I'm also filtering here so this runs a little faster, you could run this on the whole data frame
# Let's run the above but just on the hallmark genes
hallmark <- msigdbr_df %>% dplyr::filter(gs_cat == 'H')
hallmark_t2g <- hallmark %>% dplyr::select(gs_name, human_gene_symbol) %>% as.data.frame()
hallmark_t2g
hallmark_t2g |> group_by(gs_name) |> tally()
hallmark_t2g |> count(gs_name)
hallmark_t2g |> group_by(gs_name) |> unique(gs_name)
lenght(unique(hallmark_t2g$gs_name))
length(unique(hallmark_t2g$gs_name))
colnames(hallmark_t2g) <- c('TERM', 'GENE')
e_hall <- enricher(gene = c(brg1_down$rowname, brg1_up$rowname), TERM2GENE = hallmark_t2g )
dotplot(e_hall)
emapplot(pairwise_termsim(e_hall) )
#### Gene Set Enrichment Analysis - main benefit is that it does not require an arbitrary threshold ######
brg1_hallmark <- GSEA(geneList = rev(sort(brg1_ol)), TERM2GENE = hallmark_t2g, by = 'fgsea' )
brg1_hallmark %>% as.data.frame() %>% head()
brg1_hallmark %>%
as.data.frame() %>%
rownames_to_column() %>%
arrange(NES) %>%
mutate(rowname = factor(rowname, levels = rowname) ) %>%
ggplot(aes(x = rowname, y = NES, fill = as.factor(sign(NES)))) +
geom_col(color = 'grey30') +
coord_flip() +
scale_fill_manual(values = c('blue', 'gold2') )
gseaplot2(brg1_hallmark, geneSetID = 'HALLMARK_TNFA_SIGNALING_VIA_NFKB')
gseaplot(brg1_hallmark, geneSetID = 'HALLMARK_TNFA_SIGNALING_VIA_NFKB')
ridgeplot(brg1_hallmark, fill = 'p.adjust', core_enrichment = T)
# THe core_enrichment argument tells the plot to only include those genes that were in the core_enrichment column
# these are the genes that contribue the most to the scores
ridgeplot(brg1_hallmark, fill = 'p.adjust', core_enrichment = F)
# We can extract a specific set of these genes
hallmark_subset <- hallmark_t2g %>% filter(TERM == 'HALLMARK_TNFA_SIGNALING_VIA_NFKB') %>% pull(GENE)
# We can extract a specific set of these genes
hallmark_subset <- hallmark_t2g %>% dplyr::filter(TERM == 'HALLMARK_TNFA_SIGNALING_VIA_NFKB') %>% pull(GENE)
# and plot this subset as a volcano plot
brg_res %>%
filter(rowname %in% hallmark_subset) %>%
ggplot(aes(x =log2FoldChange, y = -log10(padj), color = padj < 0.05 )) +
geom_point() +
scale_color_manual(values = c('grey70', 'red2')) +
theme_bw()  +
ggrepel::geom_label_repel(aes(label = rowname), color = 'steelblue')
# and plot this subset as a volcano plot
brg_res %>%
dplyr::filter(rowname %in% hallmark_subset) %>%
ggplot(aes(x =log2FoldChange, y = -log10(padj), color = padj < 0.05 )) +
geom_point() +
scale_color_manual(values = c('grey70', 'red2')) +
theme_bw()  +
ggrepel::geom_label_repel(aes(label = rowname), color = 'steelblue')
# We want our original data, which we can load from a saved DESeqDataSet
# Remember counts is coming from the entire dds object we loaded up top
rg <- rankGenes(counts) # this ranks the expression level in each of our samples
rg
# Now we pass this to simplescore along with a list of genes for our data set
ss <- simpleScore(rg, upSet = unique(hallmark_subset) )
ss
table(rownames(rg) == 'CYR61')
# Using this we can compare our scores across our samples
# best to incorporate our conditions
ss %>% as.data.frame() %>%
rownames_to_column() %>%
separate(rowname, into = c('group', 'rep'), sep = '_', remove =F )  %>%
ggplot(aes(x = group, y = TotalScore)) + geom_point()
liver_genes <- msigdbr_df[grepl('HSIAO_LIVER_SPECIFIC_GENES', msigdbr_df$gs_name), ] %>% dplyr::select(gs_name, gene_symbol)
liver_genes
# lets score for increase TNFA and decrease liver specific genes
ss_liver <- simpleScore(rg, upSet= unique(hallmark_subset), downSet = unique(liver_genes$gene_symbol) )
ss_liver %>% as.data.frame() %>%
rownames_to_column() %>%
separate(rowname, into = c('group', 'rep'), sep = '_', remove =F )  %>%
ggplot(aes(x = group, y = TotalScore)) + geom_point()
################################################################################
# Overlaps between groups  ####################################################
################################################################################
brg_res <- read_csv('data/results_brg1.csv')
brm_res <- read_csv('data/results_brm.csv')
double_res <- read_csv('data/results_double.csv')
brg_sig <- brg_res %>% filter(padj < 0.05)
brm_sig <- brm_res %>% filter(padj <0.05)
double_sig <- double_res %>% filter(padj < 0.05)
brg_sig
x <- list(brg=brg_sig$rowname, brm=brm_sig$rowname, double=double_sig$rowname)  # list of our gene names, 1 element for each data set
brg_sig <- brg_res %>% dplyr::filter(padj < 0.05)
brm_sig <- brm_res %>% dplyr::filter(padj <0.05)
double_sig <- double_res %>% dplyr::filter(padj < 0.05)
x <- list(brg=brg_sig$rowname, brm=brm_sig$rowname, double=double_sig$rowname)  # list of our gene names, 1 element for each data set
head(x)
str(x)
# If you want separate colors for each, this works well
ggvenn::ggvenn(x)
ggvenn::ggvenn(x[1:2])
ggvenn::ggvenn(x, fill_color = c('red', 'blue', 'green') )
# IF you want color to map to the counts in a section use this
ggVennDiagram::ggVennDiagram(x)
ggVennDiagram::ggVennDiagram(x, label_alpha  = 0) +
ggplot2::scale_fill_gradient(low="blue",high = "yellow") +
scale_color_manual(values = c('grey30', 'grey30', 'grey30') )
# UpSet plots - overlap of categories - similar to venn
# but much better
UpSetR::upset(fromList(x))
upset(fromList(x), matrix.color = 'steelblue', main.bar.color = 'hotpink' )
iris
iris_long <- pivot_longer(iris, names_to = 'measurement', values_to = 'vals', cols = -Species)
library(tidyverese)
library(tidyverse)
iris_long <- pivot_longer(iris, names_to = 'measurement', values_to = 'vals', cols = -Species)
iris_long
iris_wide <- pivot_wider(iris_long, id_cols = Species, names_from = measurement, values_from = vals)
iris_wide
iris_wide[,Sepal.Length]
iris_wide[,'Sepal.Length']
iris_wide[1,'Sepal.Length']
iris_long
# Import design data
design <- read_csv('data/class_data_info.csv')
# If you need to install DESeq or tximport use bioconductor
#install.packages('BiocManager') # This installs the function to use Bioconductor
#BiocManager::install(c('DESeq2', 'tximport', 'tximeta', 'apeglm') ) # This installs DESEq and tximport
library(DESeq2) # main package for differential expression
library(tximport) # Helper functions for reading in count data
# Import design data
design <- read_csv('data/class_data_info.csv')
# As always, start by loading needed libraries
library(tidyverse)
# Import design data
design <- read_csv('data/class_data_info.csv')
design
paste0(design$Sample, '_decoy_quant')
# This line creates a new column to keep track of where each Salmon output file is
# file.path makes sticks the arguments together with / between them to make path names
design$files <- file.path('data/salmon', paste0(design$Sample, '_decoy_quant'), 'quant.sf')
design
design$names <- design$Sample
# Import Salmon quant files
txi <- tximeta(coldata = design, type = 'salmon')
# Helper functions for reading in count data
library(tximeta)
BiocManager::install('tximeta')
# Import Salmon quant files
txi <- tximeta(coldata = design, type = 'salmon')
# Helper functions for reading in count data
library(tximeta)
# Import Salmon quant files
txi <- tximeta(coldata = design, type = 'salmon')
txi
txi
se <- summarizeToGene(txi)
se
rowData(txi)
rowData(se)
colData(se)
assays(se)
assays(se)$counts
assays(se)$abundance
# The next line creates a summarizedExperiment object that can be usd for
#     differential testing
dds <- DESeqDataSet(se , design = ~ treat )
# The next line creates a summarizedExperiment object that can be usd for
#     differential testing
dds <- DESeqDataSet(se , design = ~ Group )
dds
metadata(se)
save(dds, file = '~/Desktop/rna_dds.Rda')
#################################################################################
# This is how we run the actual differential test with defaults
# is very easy if you have a simple experimental design and analysis approach
###############################################################################
des <- DESeq(dds) # This runs all the DESeq steps
res
res
des
rowData(des)
resultsNames(des)
res <- results(des, format = 'GRanges', saveCols=2) # this returns a DESeq results object
res
seqlevelsStyle(res) <- 'UCSC'
res
keepStandardChromosomes(res)
res
res |> as.data.frame()
res |> as.data.frame() |> ggplot(aes(x = log2(basemean), y = log2FoldChange) )
res |> as.data.frame() |> ggplot(aes(x = log2(baseMean), y = log2FoldChange) )
res |> as.data.frame() |> ggplot(aes(x = log2(baseMean), y = log2FoldChange) ) + geom_point()
resultsNames(des)
shrunk <- lfcShrink(des, coef = 2, type = 'ape', format = 'GRanges', saveCols =2 )
BiocManager::install('apeglm')
shrunk <- lfcShrink(des, coef = 2, type = 'ape', format = 'GRanges', saveCols =2 )
res
res |> as.data.frame() |> ggplot(aes(x = log2(baseMean), y = log2FoldChange) ) + geom_point()
shrunk |> as.data.frame() |> ggplot(aes(x = log2(baseMean), y = log2FoldChange) ) + geom_point()
table(shrunk$padj <0.05, shrunk$log2FoldChange > 0)
table(shrunk$padj <0.05)
table(res$padj < 0.05)
des
rowData(des)
res <- results(des, independentFiltering = T, format = 'GRanges', saveCols=2) # this returns a DESeq results object
table(res$padj < 0.05)
res
width(res)
