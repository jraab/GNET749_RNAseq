library(tidyverse)
counts <- read_csv('data/drug_norm_counts.csv')
sample_info <- read_csv('data/drug_samples.csv')
sample_info
# How many treatments are there
sample_info %>% group_by(treatment) %>% summarise(n())
# How many treatments are there
sample_info %>% group_by(treatment) %>% count()
table(sample_info$genotype)
table(sample_info$genotype)
# How Many genotypes
sample_info %>% group_by(genotype) %>% count()
table(sample_info$genotype)
# How many of each combination
sample_info %>% group_by(genotype, treatment) %>% count()
table(sample_info$genotype, sample_info$treatment)
# Make simple plots for a few genes to see if there is a difference
genes - c('MCRS1', 'MAP3K7', 'ARID2')
counts_l <- counts %>%
pivot_longer(names_to = 'samples', values_to = 'counts', -rowname)
# Join with sample information
counts_l <- counts_l %>%
left_join(sample_info, by = 'samples')
# some genes we can plot
genes <- c('MCRS1', 'MAP3K7', 'ARID2')
# Plot data to explore
counts_l %>%
filter(rowname %in% genes) %>%
ggplot(aes(x = genotype, y = log2(counts), color = treatment)) +
geom_point(position = position_dodge(0.9)) +
facet_wrap(~rowname, scales = 'free_y')
#Intro to R - Class two
# NYC Flights practcice
#install.packages('nycflights13')
flights
#Intro to R - Class two
# NYC Flights practcice
#install.packages('nycflights13')
library(nycflights13)
flights
flights |>
group_by(origin) |>
count()
summarise(mean_flight_legth = mean(air_time)
)
# How long was the averagef light that left EWR
flights |>
filter(origin == 'EWR') |>
group_by(origin) |>
summarise(mean_flight_legth = mean(airtime) )
# How long was the averagef light that left EWR
flights |>
filter(origin == 'EWR') |>
group_by(origin) |>
summarise(mean_flight_legth = mean(air_time) )
# How long was the averagef light that left EWR
flights |>
filter(origin == 'EWR') |>
group_by(origin) |>
summarise(mean_flight_legth = mean(air_time, na.rm = T) )
flights |>
group_by(dest) |>
summarise(mean_delay = mean(arr_delay, na.rm = T) )
flights |>
group_by(dest) |>
summarise(mean_delay = mean(arr_delay, na.rm = T) ) |>
arrange(desc)
flights |>
group_by(dest) |>
summarise(mean_delay = mean(arr_delay, na.rm = T) ) |>
arrange(desc( mean_delay) )
# Which carrier had the most departure delays ( dep_delay > 0)
flights |>
filter(dep_delay > 0) |>
group_by(carrier) |>
count()
# Which carrier had the most departure delays ( dep_delay > 0)
flights |>
filter(dep_delay > 0) |>
group_by(carrier) |>
count()   |>
arrange(desc(n) )
#How many flights per year
flights |>
group_by(year) |>
count()
count()
#How many flights per year
flights |>
group_by(month) |>
count()
#Class excercise time
# Importing Data
# Data sets from sports-reference.com
# see clean_duke_unc.R to see how I merged the data and cleaned it u  p
comb <- read_csv('data/duke_unc_hoops.csv')
comb |>
ggplot(aes(x = overall_w_l_percent, color = team) ) +
geom_density()
flights
weather
nycflights13::planes
table(flights$year)
weather
# What airport had the highest average wind
weather |>
group_by(origin) |>
summarise(avg_wind_speed = mean(wind_speed, na.rm = T) )
weather |>
group_by(origin) |>
summarise(avg_wind_speed = mean(wind_speed, na.rm = T) ) |>
ggplot(aes(x = origin, y = avg_wind_speed)) +
geom_col()
weather |>
ggplot(aes(x = origin, y = wind_speed)) + geom_boxplot()
#Wait - what? who had 1000+ mile an hour windspeed
weather |>
filter(wind_speed > 1000)
weather |>
filter(wind_speec < 1000) |>
ggplot(aes(x = origin, y = wind_speed)) + geom_boxplot()
weather |>
filter(wind_speec < 1000) |>
ggplot(aes(x = origin, y = wind_speed)) + geom_boxplot()
weather |>
filter(wind_speed < 1000) |>
ggplot(aes(x = origin, y = wind_speed)) + geom_boxplot()
# Which month had the highest average wind
weather |>
filter(wind_speed < 1000) |>
group_by(month) |>
summarise(mean_wind_speed = mean(wind_speed, na.rm = ))
weather |>
filter(wind_speed < 1000) |>
ggplot(aes(x = month, y = wind.speed)))+ geom_boxplot()
weather |>
filter(wind_speed < 1000) |>
ggplot(aes(x = month, y = wind.speed))+ geom_boxplot()
weather |>
filter(wind_speed < 1000) |>
ggplot(aes(x = month, y = wind_speed))+ geom_boxplot()
weather |>
filter(wind_speed < 1000) |>
ggplot(aes(x = as.factor(month), y = wind_speed))+ geom_boxplot()
# Which airport and month had the most rain
weather |>
group_by(origin) |>
summarise(total_rain= sum(precip, na.rm = T) )
weather |>
group_by(origin) |>
summarise(total_rain= sum(precip, na.rm = T) ) |>
ggplot(aes(x = origin, y = total_rain) ) +
geom_col()
# are rainy days windier?
weather |>
ggplot(aes(x=precip, y = wind_speed)) +
geom_point()
# are rainy days windier?
weather |>
filter(wind_speed <1000) |>
ggplot(aes(x=precip, y = wind_speed)) +
geom_point()
# are rainy days windier?
weather |>
filter(wind_speed <1000) |>
ggplot(aes(x=precip, y = wind_speed)) +
geom_point() +
geom_smooth(method = 'lm')
# Do rainy days have more departure dealys
# need to join
flights
weather
nycflights13::airports
# USing the rnaseq in data/drug_norm_counts.csv and drug_samples.csv try the following
# load data
drug_counts <- read_csv('data/drug_norm_counts.csv')
drug_samples <- read_csv('data/drug_samples.csv')
drug_counts
drug_samples
#Plot GAPDH expression in treatment (DMSO vs EPZ)
# First pivot the wide data
drug_counts_long <- pivot_longer(drug_counts, -rowname, names_to = 'samples', values_to = 'counts')
# Then combine with sample info (samples key)
drug_data <- drug_counts_long |> left_join(drug_samples, by = 'samples')
drug_data
# Now you can plot a gene of interest
drug_data |>
filter(rowname == 'GAPDH') |>
ggplot(aes(x = treatment, y = log2(counts))) +
geom_point()
#Intro to R - Class two
################################################################################
### RECAP/PRACTICE FROM CLASSS 1        ########################################
# NYC Flights practcice - recap of class 1
#install.packages('nycflights13')
library(nycflights13)
#Intro to R - Class two
################################################################################
### RECAP/PRACTICE FROM CLASSS 1        ########################################
# NYC Flights practcice - recap of class 1
#install.packages('nycflights13')
library(nycflights13)
?nycflights13
??nycflights13
nycflights13::
flights
#How many flights originated at each airport
fligths |>
group_by(origin) |>
count()
#How many flights originated at each airport
flights |>
group_by(origin) |>
count()
table(flights$origin)
table(flights$origin) |> as_tibble()
table(flights$origin) |> as.data.frame()
# How long was the average flight that left EWR
flights |>
filter(origin == 'EWR')
# How long was the average flight that left EWR
flights |>
filter(origin == 'EWR') |>
group_by(origin) |>
summarise(mean_air_time = mean(air_time, na.rm = T) )
# How long was the average flight that left EWR
flights |>
#  filter(origin == 'EWR') |>
group_by(origin) |>
summarise(mean_air_time = mean(air_time, na.rm = T) )
table(flights$origin)
# How long was the average flight that left EWR
flights |>
filter(origin == 'EWR') |>
#  group_by(origin) |>
summarise(mean_air_time = mean(air_time, na.rm = T) )
View(flights)
# what airport had the longest average arrival delay
flights |>
group_by(dest) |>
summarise(mean_delay_arr = mean(arr_delay, na.rm= T)  )
# what airport had the longest average arrival delay
flights |>
group_by(dest) |>
summarise(mean_delay_arr = mean(arr_delay, na.rm= T)  ) |>
arrange( desc ( mean_delay_arr) )
# Which carrier had the most departure delays ( dep_delay > 0)
flights |>
filter(dep_delay > 0 ) |>
group_by(carrier) |>
count()
# Which carrier had the most departure delays ( dep_delay > 0)
flights |>
filter(dep_delay > 0 ) |>
group_by(carrier) |>
count() |>
arrange(desc(n) )
# Relational Data#############################################################################
# Goal is to explain functions / merges / aggregating data / more advanced wrangling
#install.packages('nycflights13)
library(nycflights13)
#nycflights13::
# has 5 tables
flights
airlines
weather
airports
planes
flights
# make data a little smaller so we can see better
flights_small <- flights %>% select(flight, tailnum, air_time, distance, origin, dest)
flights_small
planes
# We want to answer questiosn about how long flights are based on the type of plane
# We have tail numbers for all planes, but we don't know what those planes are
flights_small <- left_join(flights_small, planes, by = 'tailnum' )
flights_small
# Notice some data is missing, always keep an eye out for this and think about how to deal
#average speed by number of engines
flights_small |>
group_by(engines) |>
summarise( mean_speed = mean(speed) )
# Notice some data is missing, always keep an eye out for this and think about how to deal
#average speed by number of engines
flights_small |>
group_by(engines) |>
summarise( mean_speed = mean(speed, na.rm = T) )
flights
planes
# how long are flights for different sized planes
flights_small
flights_small |>
group_by(engines) |>
summarise(mean_air_time = mean(air_time, na.rm = T) )
flights_small
flights_small |>
ggplot(aes( x = seats, y = air_time) ) +
geom_point()
flights_small |>
ggplot(aes( x = seats, y = air_time) ) +
geom_point()
flights_small |>
ggplot(aes( x = seats, y = air_time) ) +
geom_point()
flights_small
flights_small |>
ggplot(aes( x = seats, y = air_time) ) +
geom_point()
flights_small |>
ggplot(aes( x = seats, y = air_time) ) +
geom_point()
flights_small |>
ggplot(aes( x = seats, y = air_time, color = as.factor(engines)) ) +
geom_point()
flights_small |>
ggplot(aes( x = as.factor(engines) , y = air_time) )  +
geom_boxplot()
flights_small |>
ggplot(aes( x = as.factor(engines) , y = air_time) )  +
geom_boxplot(notch =T )
# Aggregate some data so we have speices averages
iris_summary <- iris |> group_by(Species) |>
summarise (mean_sepal_width= mean(Sepal.Width),
sd_sepal_width = sd(Sepal.Width) )
iris_summary
#Make a barplot
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col() +
# Dynamite plot
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col() +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width) )
#Make a barplot
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col() +
# Dynamite plot
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col() +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width) )
#Make a barplot
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col()
# Dynamite plot
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col() +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width) )
# Make it look better
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.1)
iris
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.1)  +
geom_point(aes(x = Species, y = Sepal.Width, color = Species), data = iris)
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.1)  +
geom_jitter(aes(x = Species, y = Sepal.Width, color = Species), data = iris, width =0.1)
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_jitter(aes(x = Species, y = Sepal.Width, color = Species), data = iris, width =0.1)  +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.1)
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_jitter(aes(x = Species, y = Sepal.Width, color = Species), data = iris, width =0.1,
alpha = 0. 1)  +
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_jitter(aes(x = Species, y = Sepal.Width, color = Species), data = iris, width =0.1,
alpha = 0.1)  +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.1)
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_jitter(aes(x = Species, y = Sepal.Width, color = Species), data = iris, width =0.1,
alpha = 0.1)  +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.5)
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_jitter(aes(x = Species, y = Sepal.Width, color = Species), data = iris, width =0.1,
alpha = 0.5)  +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.1)
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width)) +
geom_col(fill = 'grey90', color = 'grey20') +
geom_jitter(aes(x = Species, y = Sepal.Width, color = Species), data = iris, width =0.1,
alpha = 0.4)  +
geom_errorbar(aes(ymin = mean_sepal_width-sd_sepal_width,
ymax = mean_sepal_width+sd_sepal_width),
width = 0.1)
?aes
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width, fill = Species)) +
geom_col() +
theme_bw()
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width, fill = Species)) +
geom_col(color = 'grey20') +
theme_bw()
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width, fill = Species)) +
geom_col(color = 'grey20') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(size = 24, family = 'serif'))
# Make the bars the color you want
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width, fill = Species)) +
geom_col(color = 'grey20') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text.x = element_text(size = 24, family = 'serif')) +
scale_fill_manual(values = c('steelblue', 'forestgreen', 'goldenrod'))
# Make the bars the color you want
iris_summary |>
ggplot(aes(x = Species, y = mean_sepal_width, fill = Species)) +
geom_col(color = 'grey20') +
theme_bw() +
scale_fill_manual(values = c('steelblue', 'forestgreen', 'goldenrod'))
factor(iris_summary$Species)
